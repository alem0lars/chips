#!/usr/bin/env ruby


# {{{ Some useful constants.

NSNavPanelExpandedStateForSaveMode = %w(
  NSNavPanelExpandedStateForSaveMode
  NSNavPanelExpandedStateForSaveMode2
)

PMPrintingExpandedStateForPrint = %w(
  PMPrintingExpandedStateForPrint
  PMPrintingExpandedStateForPrint2
)

# }}}

system_configuration = proc do |c|

  hostname = c.ask "What's your hostname"
  
  c.sysconfig msg:   "Set hostname to `#{hostname}`.",
              name:  %w(ComputerName HostName LocalHostName), 
              value: hostname
              
  c.default msg:     "Set Samba server name to `#{hostname}`.",
            domain:  "/Library/Preferences/SystemConfiguration/com.apple.smb.server",
            name:    "NetBIOSName", 
            value:   hostname,
            as_root: true

  c.default msg:     "Disable Spotlight indexing for any volume that gets mounted and has not yet been indexed before.",
            domain:  "/.Spotlight-V100/VolumeConfiguration",
            name:    "Exclusions", 
            value:   %w(/Volumes),
            as_root: true
  
  c.default msg:     "Reveal IP address, hostname, OS version, etc. when clicking the clock in the login window.",
            domain:  "/Library/Preferences/com.apple.loginwindow",
            name:    "AdminHostInfo", 
            value:   "HostName",
            as_root: true
            
  c.default msg:  "Expand save panel by default.",
            name:  NSNavPanelExpandedStateForSaveMode, 
            value: true
            
  c.default msg:   "Expand print panel by default.",
            name:  PMPrintingExpandedStateForPrint, 
            value: true

  c.default msg:    "Automatically quit printer app once the print jobs complete.",
            domain: "com.apple.print.PrintingPrefs",
            name:   "Quit When Finished", 
            value:  true

  c.default msg:    "Disable system-wide resume.",
            domain: "com.apple.systempreferences", 
            name:   "NSQuitAlwaysKeepsWindows", 
            value:  false

  c.default msg:    "Disable the crash reporter.",
            domain: "com.apple.CrashReporter", 
            name:   "DialogType", 
            value:  "none"

  c.default msg:    "Set Help Viewer windows to non-floating mode.",
            domain: "com.apple.helpviewer", 
            name:   "DevMode", 
            value:  true

  c.syssetup msg:   "Automatically restart if the computer freezes.",
             name:  "setrestartfreeze",
             value: "on"

  c.default msg:  "Enable keyboard repeating.",
            name: "ApplePressAndHoldEnabled", value: false

  c.default msg:   "Set sidebar icon size to medium.",
            name:  "NSTableViewDefaultSizeMode",
            value: 1

  c.default msg:   "Always show scrollbars.",
            name:  "AppleShowScrollBars", 
            value: "Always"

  c.default msg:   "Increase window resize speed.",
            name:  "NSWindowResizeTime", 
            value: 0.001
  
  c.default msg:    "Unlock debug menu in Disk Utility.",
            domain: "com.apple.DiskUtility", 
            name:   "DUDebugMenuEnabled", 
            value:  1

  c.default msg:   "Save to disk, rather than iCloud, by default.",
            name:  "NSDocumentSaveNewDocumentsToCloud", 
            value: false
            
  c.default msg:    "Check for software updates daily, not just once per week.",
            domain: "com.apple.SoftwareUpdate", 
            name:   "ScheduleFrequency", 
            value:  1
            
  c.default msg:   "Enable full keyboard access for all controls (enable Tab in modal dialogs, menu windows, etc.)",
            name:  "AppleKeyboardUIMode", 
            value: 3
  
  c.default msg:   "Disable smart quotes.", 
            name:  "NSAutomaticQuoteSubstitutionEnabled", 
            value: false
            
  c.default msg:   "Disable smart dashes.", 
            name:  "NSAutomaticDashSubstitutionEnabled", 
            value: false
  
  c.default msg:   "Disable auto-correct.", 
            name:  "NSAutomaticSpellingCorrectionEnabled", 
            value: false
  
  c.default msg:   "Set trackpad speed.", 
            name:  "com.apple.trackpad.scaling", 
            value: 2
            
  c.default msg:   "Set mouse speed.", 
            name:  "com.apple.mouse.scaling", 
            value: 2.5
  
  c.default msg:   "Enable subpixel font rendering on non-Apple LCDs",
            name:  "AppleFontSmoothing", 
            value: 2
             
  c.default msg:    "Turn off keyboard illumination when computer is not used for 5 minutes.",
            domain: "com.apple.BezelServices", 
            name:   "kDimTime", 
            value:  300

  c.default msg:    "Avoid creation of .DS_Store files on network volumes.",
            domain: "com.apple.desktopservices", 
            name:   "DSDontWriteNetworkStores", 
            value:  true

  # {{{ Finder.

  c.default msg: "Disable the warning when changing a file extension.",
            domain: "com.apple.finder", 
            name: "FXEnableExtensionChangeWarning", 
            value: false
             
  c.default msg: "Show icons for hard drives, servers, and removable media on the desktop.",
            domain: "com.apple.finder", 
            name: "ShowExternalHardDrivesOnDesktop", 
            value: true
  
  c.default msg: "Show status bar in Finder by default.",
            domain: "com.apple.finder", 
            name: "ShowStatusBar", 
            value: true
             
  c.default msg: "Use column view in all Finder windows by default.",
            domain: "com.apple.finder", 
            name: "FXPreferredViewStyle", 
            value: "Clmv"
             
  c.default msg: "Allow text selection in Quick Look/Preview in Finder by default.",
            domain: "com.apple.finder", 
            name: "QLEnableTextSelection", 
            value: true
  
  c.plist msg:  "Show item info near icons in other icon views",
          cmd:  ["Set :DesktopViewSettings:IconViewSettings:showItemInfo true",
                 "Set :StandardViewSettings:IconViewSettings:showItemInfo true",
                 "Set :FK_StandardViewSettings:IconViewSettings:showItemInfo true"],
          path: "~/Library/Preferences/com.apple.finder.plist"

  c.plist msg:  "Show item info to the right of the icons on the desktop.",
          cmd:  "Set DesktopViewSettings:IconViewSettings:labelOnBottom false",
          path: "~/Library/Preferences/com.apple.finder.plist"

  c.plist msg: "Enable snap-to-grid for icons on the desktop and in other icon views.",
          cmd: ["Set :DesktopViewSettings:IconViewSettings:arrangeBy grid",
                "Set :FK_StandardViewSettings:IconViewSettings:arrangeBy grid",
                "Set :StandardViewSettings:IconViewSettings:arrangeBy grid"],
          path: "~/Library/Preferences/com.apple.finder.plist"

  c.plist msg:  "Set grid spacing for icons on the desktop and in other icon views.",
          cmd:  ["Set :DesktopViewSettings:IconViewSettings:gridSpacing 100",
                 "Set :FK_StandardViewSettings:IconViewSettings:gridSpacing 100",
                 "Set :StandardViewSettings:IconViewSettings:gridSpacing 100"],
          path: "~/Library/Preferences/com.apple.finder.plist"

  c.plist msg:  "Set the size of icons on the desktop and in other icon views.",
          cmd:  ["Set :DesktopViewSettings:IconViewSettings:iconSize 80",
                 "Set :FK_StandardViewSettings:IconViewSettings:iconSize 80",
                 "Set :StandardViewSettings:IconViewSettings:iconSize 80"],
          path: "~/Library/Preferences/com.apple.finder.plist"
  
  # }}}

  # {{{ Dock and Mission Control.

  c.default msg:    "Setting the icon size of Dock items to 36 pixels for optimal size/screen-realestate",
            domain: "com.apple.dock",
            name:   "tilesize",
            value:  36
            
  c.default msg:    "In Mission Control group windows by application.",
            domain: "com.apple.dock",
            name:   "expose-group-by-app",
            value:  true
            
  # }}}
  
  # {{{ WebBrowsers (Chrome & Safari) and WebKit.

  c.default msg:    "Disable universal search (don’t send search queries to Apple).",
            domain: "com.apple.Safari",
            name:   "UniversalSearchEnabled",
            value:  false
            
  c.default msg:    "Disable search suggestions (don’t send search queries to Apple).",
            domain: "com.apple.Safari",
            name:   "SuppressSearchSuggestions",
            value:  true
            
  c.default msg:    "Hide Safari's bookmarks bar by default.",
            domain: "com.apple.Safari",
            name:   "ShowFavoritesBar",
            value:  false
 
  c.default msg:    "Hide Safari's sidebar in Top Sites.",
            domain: "com.apple.Safari",
            name:   "ShowSidebarInTopSites",
            value:  false
 
  c.default msg:    "Disable Safari's thumbnail cache for History and Top Sites.",
            domain: "com.apple.Safari",
            name:   "DebugSnapshotsUpdatePolicy",
            value:  2
 
  c.default msg:    "Enable Safari's debug menu.",
            domain: "com.apple.Safari",
            name:   "IncludeInternalDebugMenu",
            value:  true
 
  c.default msg:    "Make Safari's search banners default to Contains instead of Starts With.",
            domain: "com.apple.Safari",
            name:    "FindOnPageMatchesWordStartsOnly",
            value:   false

  c.default msg:    "Remove useless icons from Safari's bookmarks bar.",
            domain: "com.apple.Safari",
            name:   "ProxiesInBookmarksBar",
            value:  "()"
 
  c.default msg:    "Enable the Develop menu and the Web Inspector in Safari.",
            domain: "com.apple.Safari",
            name:   ["IncludeDevelopMenu",
                     "WebKitDeveloperExtrasEnabledPreferenceKey",
                     "com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled"],
            value:  true
 
  c.default msg:   "Adding a context menu item for showing the Web Inspector in web views.",
            name:  "WebKitDeveloperExtras",
            value: true

  c.default msg:    "Disable the annoying backswipe in Chrome.",
            domain: "com.google.Chrome",
            name:   "AppleEnableSwipeNavigateWithScrolls",
            value:  false
            
  c.default msg:    "Disable the annoying backswipe in Chrome Canary.",
            domain: "com.google.Chrome.canary",
            name:   "AppleEnableSwipeNavigateWithScrolls",
            value:  false

  c.default msg:    "Use the system-native print preview dialog in Chrome.",
            domain: "com.google.Chrome",
            name:   "DisablePrintPreview",
            value:  true
            
  c.default msg:    "Use the system-native print preview dialog in Chrome Canary.",
            domain: "com.google.Chrome.canary",
            name:   "DisablePrintPreview",
            value:  true

  # }}}
  
  # {{{ Screensaver.
  
  c.default msg: "Require password after sleep or screen saver begins.",
            domain: "com.apple.screensaver", 
            name: "askForPassword", 
            value: 1
  
  c.default msg: "Wait no time before asking password after sleep or screen saver.",
            domain: "com.apple.screensaver", 
            name: "askForPasswordDelay",
            value: 0

  # }}}
  
  # {{{ Screencapture.
  
  c.default msg: "Set screenshot format to PNG.",
            domain: "com.apple.screencapture", 
            name: "type", 
            value: "png"

  # }}}
  
  # {{{ Create basic directories.
  
  c.mkdir msg: "Creating the user's temporary directory.",
          path: "${HOME}/tmp"
  
end


# {{{ = IGNORE THIS ============================================================

module Utils # {{{

  def info(prefix, msg = nil) # {{{
    if msg.nil?
      puts("#{prefix}")
    else
      puts("#{prefix} #{msg}")
    end
  end # }}}

  def warning(msg, ask_continue: true) # {{{
    puts("⚠ #{msg}")
    exit(-1) if ask_continue && !quiz('continue')
  end # }}}

  def error(msg) # {{{
    puts("☠ #{msg}")
    exit(-1)
  end # }}}

  def ask(question, type: :string) # {{{
    $stdout.write("#{question.strip}? ")
    answer = $stdin.gets.chomp 
    case type
    when :bool
      if answer =~ /y|ye|yes|yeah|ofc/i
        true
      elsif answer =~ /n|no|fuck|fuck\s+you|fuck\s+off/i
        false
      else
        info "Answer misunderstood."
        ask(question, type: type)
      end
    when :string
      if answer.empty?
        warning "Empty answer.", ask_continue: false
        ask(question, type: type)
      else
        answer
      end
    when :int   then Integer(answer)
    when :float then Float(answer)
    when :array then answer.split(/\s*,\s*/)
    else
      error("Unhandled question type: `#{type}`.")
    end
  end # }}}
  
  def type_from_value(value) # {{{
    if value.is_a?(TrueClass) || value.is_a?(FalseClass) then :bool
    elsif value.is_a?(String) then :string
    elsif value.is_a?(Integer) then :int
    elsif value.is_a?(Float) then :float
    elsif value.is_a?(Array) then :array
    else error("Don't know how to handle `#{value.class}`.")
    end
  end # }}}
  
end # }}}

class CommandsExecutor # {{{
  
  include Utils
  
  def initialize
    @commands = []
  end

  # {{{ DSL.
  
  def mkdir(msg: nil, path: nil, as_root: false)
    error("Missing `path`.") if path.nil?
    
    Array(path).each do |n|
      @commands << {
        msg:     msg,
        cmd:     "mkdir -p \"#{path}\"",
        as_root: as_root
      }
    end
  end
  
  def syssetup(name: nil, value: nil, question: nil, msg: nil)
    error("Missing `name`.") if name.nil?
    error("Missing `value` or `question`.") if value.nil? && question.nil?
    
    value = ask(question) if question

    Array(name).each do |n|
      @commands << {
        msg:     msg,
        cmd:     "systemsetup -#{n} \"#{value}\"",
        as_root: true # systemsetup can be run only by root user.
      }
    end
  end
  
  def plist(msg: msg, cmd: nil, path: nil, as_root: false)
    error("Missing `cmd`.") if cmd.nil?
    error("Missing `path`.") if path.nil?
    
    Array(cmd).each do |c|
      @commands << {
        msg: msg,
        cmd: "/usr/libexec/PlistBuddy -c \"#{c}\" \"#{path}\"",
        as_root: as_root
      }
    end
  end
  
  def sysconfig(msg: nil, name: nil, value: nil, question: nil)
    error("Missing `name`.") if name.nil?
    error("Missing `value` or `question`.") if value.nil? && question.nil?
    
    value = ask(question) if question

    Array(name).each do |n|
      @commands << {
        msg:     msg,
        cmd:     "scutil --set \"#{n}\" \"#{value}\"",
        as_root: true # scutil can only be run as root user.
      }
    end
  end
  
  def default(msg: nil, domain: :global, name: nil, value: nil, question: nil, type: nil, as_root: false)
    error("Missing `name`.") if name.nil?
    error("Missing `domain`.") if domain.nil?
    error("Missing `name` or `question`.") if value.nil? && question.nil?

    if question
      value = type.nil? ? ask(question) : ask(question, type: type) 
    end
    type = type_from_value(value) if type.nil?
    error("Unknown type `#{type}`.") unless %i(string bool int float array).include?(type)
    domain = "NSGlobalDomain" if domain == :global
    value_param = type == :array ? value.map{ |v| "\"#{v}\"" }.join(" ") : "\"#{value}\""
    
    Array(name).each do |n|
      @commands << {
        msg:     msg,
        cmd:     "defaults write \"#{domain}\" \"#{name}\" -#{type} #{value_param}",
        as_root: as_root
      }
    end
  end
  
  # }}}
  
  def execute_commands(dryrun)
    if dryrun
      info("Commands are:")
    else
      info("Executing commands..")
    end
    @commands.each do |command_info|
      command_info[:cmd] = "sudo #{command_info[:cmd]}" if command_info[:as_root]
      info(command_info[:msg]) if command_info[:msg]
      if dryrun
        info("->", command_info[:cmd])
      else
        system(command_info[:cmd])
      end
    end
  end

end # }}}

class Main # {{{
  
  include Utils
  
  def initialize
    @commands_executor = CommandsExecutor.new
  end

  def run(dryrun)
    yield(@commands_executor)
    @commands_executor.execute_commands(dryrun)
  end

  def self.run(dryrun: false, &block)
    new.run(dryrun, &block)
  end
  
end # }}}

# Entry point.
Main.run(dryrun: ARGV.include?("--dryrun"), &system_configuration)

# }}} ==========================================================================


# vim: set filetype=ruby :
