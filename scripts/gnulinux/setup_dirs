#!/usr/bin/env ruby

# {{{ requires

require 'fileutils'

# }}}

# {{{ library

def error(msg)
  puts "error: #{msg}"
  exit(-1)
end

def run_cmd(cmd, dryrun: false)
  dryrun ? puts(cmd) : system(cmd)
end


def set_facl(path, perm,
             subject: nil, name: nil, recursive: true, dryrun: false)
  subject = 'u' if subject == :owner
  subject = 'g' if subject == :group
  subject = 'o' if subject == :other
  error("invalid subject: #{subject}") unless %w(u g o).include?(subject)

  spec = "#{subject}:#{name ? name : ''}:#{perm}"

  run_cmd("setfacl -d #{recursive ? '-R' : ''} -m '#{spec}' '#{path}'",
          dryrun: dryrun)
end


def setup_dir(path, owner: nil, group: nil, perms: {}, dryrun: false)
  path = path.to_s
  owner = owner.to_s
  group = group.to_s

  perms = perms.to_s if perms.is_a?(Symbol)
  perms = perms.split(//) if perms.is_a?(String)
  perms = {
    other: perms.pop, group: perms.pop, owner: perms.pop
  } if perms.is_a?(Array)

  FileUtils.mkdir_p(path,
                    noop: dryrun, verbose: true) unless File.directory?(path)
  FileUtils.chown_R(owner, group, path, noop: dryrun, verbose: true)
  FileUtils.chmod_R("#{perms[:owner]}#{perms[:group]}#{perms[:other]}".to_i(8),
                    path, noop: dryrun, verbose: true)

  set_facl(path, perms[:owner],
           subject: :owner, name: owner, dryrun: dryrun) if perms[:owner]
  set_facl(path, perms[:group],
           subject: :group, name: group, dryrun: dryrun) if perms[:group]
  set_facl(path, perms[:other],
           subject: :other, dryrun: dryrun) if perms[:other]
end

def gpasswd(user, group, dryrun: dryrun)
  run_cmd("gpasswd -a '#{user}' '#{group}'", dryrun: dryrun)
end

def group_add(group, dryrun: dryrun)
  run_cmd("groupadd '#{group}'", dryrun: dryrun)
end

# }}}

# entry point
def main(args, dryrun: false)
  args.each do |info|
    allow = info.delete(:allow)
    group_add(info[:group]) if info[:group]
    setup_dir(info.delete(:path), info.merge(dryrun: dryrun))
    if allow
      error("can't allow: #{allow}") unless info[:group]
      allow.each { |user| gpasswd(user, info[:group], dryrun: dryrun) }
    end
  end
end

main([
  { path: '/vm/virtualbox',  group: 'vm'              },
  { path: '/data/backup',    group: 'data-backup'     },
  { path: '/data/tmp',       group: 'data-tmp'        },
  { path: '/data/documents', group: 'data-documents'  },
  { path: '/data/graphics',  group: 'data-graphics'   },
  { path: '/data/audio',     group: 'data-audio'      },
  { path: '/data/video',     group: 'data-video'      },
  { path: '/data/develop',   group: 'data-develop'    },
  { path: '/data/downloads', group: 'data-downloads'  }
].map { |h| {
  owner: :root,
  perms: '770',
  allow: %i(alem0lars)
}.merge(h) })
